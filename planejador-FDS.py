######################################

# Planejador FDS #

######################################

# Este c√≥digo tem por objetivo criar agentes de IA que auxiliem
# o usu√°rio a planejar um bom fim de semana (FDS),
# dado o perfil das pessoas e a cidade onde est√£o.

######################################

# Feito por: Gabriela Chaves
# Divirta-se! :)

######################################

%pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instala o framework de agentes do Google
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response
    
# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))
  
##########################################
# Agente 1: Identificador de p√∫blico alvo #
##########################################
def agente_identificador(lista_pessoas):

    identificador = Agent(
        name="agente_identificador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ deve saber quais os crit√©rios um bom passeio deve ter, com base no p√∫blico que quer agradar.
        Por exemplo, se o seu p√∫blico √© uma fam√≠lia com beb√™ pequeno, sabe que um crit√©rio de um bom passeio de fim de semana √© que ele tenha um local apropriado para trocar fraldas.
        Se o seu p√∫blico s√£o jovens que gostam de beber, um bar animado √© a cena ideal.
        Voc√™ deve definir esses crit√©rios com base no p√∫blico alvo.
        Esses crit√©rios devem ser: se o ambiente √© aberto ou fechado, se √© barulhento, se permite animais, se permite fumantes, se tem ambiente para crian√ßas, se √© acess√≠vel (uma trilha, por exemplo, n√£o seria indicado para cadeirantes), entre outros.
        """,
        description="Agente que define crit√©rios para um bom passeio de fim de semana"
    )

    entrada_do_agente_identificador = f"Pessoas: {lista_pessoas}\n"

    criterios = call_agent(identificador, entrada_do_agente_identificador)
    return criterios
    
################################################
# Agente 2: Buscador de eventos na internet #
################################################
def agente_buscador(criterios, cidade):
    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um especialista em buscar eventos na sua cidade.
        Ao saber dos crit√©rios do seu p√∫blico alvo, como se √© lugar aberto ou fechado, qual o tempo de dura√ß√£o, etc, voc√™ deve buscar na internet por eventos que atendam a esses crit√©rios.
        Por exemplo, se √© um evento para crian√ßas e de curta dura√ß√£o, voc√™ pode propor um circo. Se √© para idosos, pode propor um teatro. E assim por diante.
        Considere sempre buscar descontos e novidades na cidade, usando palavras chave como "promo√ß√µes", "descontos", "novidades", "somente neste fim de semana".
        Voc√™ tamb√©m deve verificar se no pr√≥ximo final de semana vai chover, buscando no google.
        Considere eventos e locais que tenham uma boa avalia√ß√£o no Google.
        """,
        description="Agente que busca eventos no Google",
        tools=[google_search]
    )

    entrada_do_agente_buscador = f"""
        Crit√©rios de aceita√ß√£o: {criterios}
        Cidade: {cidade}
        """

    # Executa o agente
    eventos = call_agent(buscador, entrada_do_agente_buscador)
    return eventos
    
######################################
# Agente 3: Planejador do fim de semana #
######################################
def agente_planejador(eventos, lista_pessoas, data_de_hoje):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© √≥timo em planejar finais de semana.
            Seja para uma fam√≠lia, seja para amigos que buscam eventos animados, o seu trabalho √© entender o p√∫blico alvo, verificar os eventos dispon√≠veis na cidade e propor um cronograma para o final de semana.
            Considere planejar apenas 2 ou 3 eventos num fim de semana, para n√£o ficar cansativo.
            Considere eventos e restri√ß√µes religiosas, al√©m de restri√ß√µes de locomo√ß√£o.
            Seu plano deve conter: dia (sexta, s√°bado ou domingo), turno (manh√£, tarde, noite) ou hor√°rio (caso o evento tenha hor√°rio certo para come√ßar) e o nome do evento, al√©m do endere√ßo.
            Lembre-se se fazer no m√°ximo 3 eventos, por exemplo, 1 evento no turno da noite de sexta, 1 evento no turno da noite de s√°bado e 1 evento no turno da manh√£ de domingo.
            """,
        description="Agente planejador de eventos de fins de semana",
    )
    entrada_do_agente_planejador = f"""
        Eventos da cidade neste fim de semana: {eventos}
        Pessoas: {lista_pessoas}\n
        """
    
    # Executa o agente
    plano = call_agent(planejador, entrada_do_agente_planejador)
    return plano
    
# Formata a data de hoje
data_de_hoje = date.today().strftime("%d/%m/%Y")

# Uma mensagem inicial ao usu√°rio do agente
print("Iniciando sistema de agentes de IA capazes de planejar o fim de semana ideal, eventos na cidade indicada.")

# Ler os dados do usu√°rio: pessoas envolvidas e a cidade
lista_pessoas = input("Por favor, indique quantas e quais s√£o as pessoas que ir√£o aos eventos. Diga se elas possuem limita√ß√µes de locomo√ß√£o ou religiosas. Quanto mais informa√ß√µes forem fornecidas ao modelo, mais espec√≠fico ele ser√°. Como sugest√£o, use o modelo: N√∫mero de pessoas: [n√∫mero inteiro], Perfil das pessoas: [exemplo: "adulto jovem solteiro", "fam√≠lia com beb√™"], Restri√ß√µes: [exemplo: mobilidade reduzida, religi√£o, restri√ß√£o alimentar].")
cidade = input("Por favor, diga o CEP de onde voc√™ mora. (evite colocar seu endere√ßo completo por quest√µes de tratamento de dados sens√≠veis)")

# Tratamento de dados
if not lista_pessoas:
  print("Por favor, precisamos dos dados das pessoas que ser√£o envolvidas nos eventos.")
elif not cidade:
  print("Por favor, precisamos do CEP da cidade.")
elif len(cidade) != 8:
  print("Por favor, insira um CEP v√°lido.")
else:
  try:

# L√≥gica dos agentes
    criterios = agente_identificador(lista_pessoas)
    print("\n--- üìù Resultado do Agente 1 (Identificador) ---\n")
    display(to_markdown(criterios))
    print("--------------------------------------------------------------")

    eventos = agente_buscador(criterios, cidade)
    print("\n--- üìù Resultado do Agente 2 (Buscador) ---\n")
    display(to_markdown(eventos))
    print("--------------------------------------------------------------")

    plano = agente_planejador(eventos, lista_pessoas, data_de_hoje)
    print("\n--- üìù Resultado do Agente 3 (Planejador) ---\n")
    display(to_markdown(plano))
    print("--------------------------------------------------------------") 

# Exceptions caso algum dado de entrada n√£o seja v√°lido
  except ValueError:
      print("Erro: Por favor, insira valores num√©ricos v√°lidos.")
  except IndexError:
      print("Erro: Problema ao processar os dados de entrada.")

